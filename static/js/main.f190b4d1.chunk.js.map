{"version":3,"sources":["modules/loading.ts","lib/api/apiPlanets.ts","lib/api/apiPeople.ts","lib/api/apiMovies.ts","modules/planet.ts","modules/planetList.ts","modules/people.ts","modules/peopleList.ts","modules/movie.ts","modules/movieList.ts","modules/index.ts","App.tsx","index.tsx","lib/createRequestThunk.ts"],"names":["START_LOADING","FINISH_LOADING","startLoading","createAction","requestType","finishLoading","loading","handleActions","state","action","payload","getPlanet","id","axios","get","getPlanets","a","planets","totalPages","num","parseInt","data","Math","round","allData","morePagesAvailable","currentPage","results","forEach","e","push","getPerson","getPeople","people","getMovie","getMovies","movies","console","log","GET_PLANET_SUCCESS","getPlanetById","createRequestThunk","api","initialState","planet","type","GET_PLANETS_SUCCESS","planetList","GET_PERSON_SUCCESS","getPeopleById","GET_PEOPLE_SUCCESS","peopleList","GET_MOVIE_SUCCESS","getMovieById","movie","GET_MOVIES_SUCCESS","movieList","rootReducer","combineReducers","Home","React","lazy","People","PeopleDetail","Planets","PlanetDetail","Movies","MovieDetail","App","fallback","basename","component","path","exact","store","createStore","composeWithDevTools","applyMiddleware","ReduxThunk","ReactDOM","render","document","getElementById","request","SUCCESS","FAILURE","params","dispatch","response","error"],"mappings":"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","file":"static/js/main.f190b4d1.chunk.js","sourcesContent":["import { createAction, handleActions } from 'redux-actions';\r\nimport { IAction } from './types';\r\n\r\nconst START_LOADING = 'loading/START_LOADING';\r\nconst FINISH_LOADING = 'loading/FINISH_LOADING';\r\n\r\nexport const startLoading = createAction(\r\n  START_LOADING,\r\n  (requestType: IAction['type']) => requestType\r\n);\r\n\r\nexport const finishLoading = createAction(\r\n  FINISH_LOADING,\r\n  (requestType: IAction['type']) => requestType\r\n);\r\n\r\nconst initialState = {};\r\n\r\nconst loading = handleActions(\r\n  {\r\n    [START_LOADING]: (state, action: IAction) => ({\r\n      ...state,\r\n      [action.payload]: true\r\n    }),\r\n    [FINISH_LOADING]: (state, action) => ({\r\n      ...state,\r\n      [action.payload]: false\r\n    })\r\n  },\r\n  initialState\r\n);\r\n\r\nexport default loading;\r\n","import axios from 'axios';\r\n\r\nexport const getPlanet = (id: number) =>\r\n  axios.get(`https://swapi.dev/api/planets/${id}/`);\r\n\r\n//export const getPlanets = id =>\r\n//  axios.get(`https://swapi.dev/api/planets/`);\r\n\r\nexport const getPlanets = async () => {\r\n\r\n    const planets = await axios.get('https://swapi.dev/api/planets/');\r\n    //console.log(planets);\r\n    \r\n    let totalPages = 0;\r\n    const num = parseInt(planets.data['count']);\r\n\r\n    if (num % 10) {\r\n        totalPages = Math.round(num / 10) + 1;\r\n    } else {\r\n        totalPages = num / 10;\r\n    }\r\n\r\n    let allData = [];\r\n    let morePagesAvailable = true;\r\n    let currentPage = 0;\r\n\r\n    while(morePagesAvailable) {\r\n        currentPage++;\r\n        const response = await axios.get(`https://swapi.dev/api/planets/?page=${currentPage}`);\r\n        //console.log(response.data);\r\n        response.data.results.forEach((e: string) => allData.push(e));\r\n        morePagesAvailable = currentPage < totalPages;\r\n    }\r\n\r\n    //console.log(allData);        \r\n    return { data: allData };\r\n}\r\n","import axios from 'axios';\r\n\r\nexport const getPerson = (id: number) =>\r\n  axios.get(`https://swapi.dev/api/people/${id}/`);\r\n\r\nexport const getPeople = async () => {\r\n\r\n    const people = await axios.get('https://swapi.dev/api/people/');\r\n    \r\n    let totalPages: number = 0;\r\n    const perPage: number = 10;\r\n    const num: number = parseInt(people.data['count']);\r\n\r\n    if (num % perPage) {\r\n        totalPages = Math.round(num / perPage) + 1;\r\n    } else {\r\n        totalPages = num / perPage;\r\n    }\r\n\r\n    let allData = [];\r\n    let morePagesAvailable = true;\r\n    let currentPage = 0;\r\n\r\n    while(morePagesAvailable) {\r\n        currentPage++;\r\n        const response = await axios.get(`https://swapi.dev/api/people/?page=${currentPage}`);\r\n\r\n        response.data.results.forEach((e: string) => allData.push(e));\r\n        morePagesAvailable = currentPage < totalPages;\r\n    }\r\n       \r\n    return { data: allData };\r\n}\r\n","import axios from 'axios';\r\n\r\nexport const getMovie = (id: number) =>\r\n  axios.get(`https://swapi.dev/api/films/${id}/`);\r\n\r\nexport const getMovies = () => {\r\n  const movies = axios.get(`https://swapi.dev/api/films/`);\r\n  console.log(\"channy: \", movies);\r\n  return movies;\r\n}\r\n","//import { handleActions } from 'redux-actions';\r\nimport * as api from '../lib/api/apiPlanets';\r\nimport createRequestThunk from '../lib/createRequestThunk';\r\nimport { IAction } from './types';\r\n\r\nconst GET_PLANET = 'planet/GET_PLANET';\r\nconst GET_PLANET_SUCCESS = 'planet/GET_PLANET_SUCCESS';\r\n\r\n//export const getPlanet = createAction(GET_PLANET, id => id);\r\n\r\nexport const getPlanetById = createRequestThunk(GET_PLANET, api.getPlanet);\r\n\r\nconst initialState = {\r\n  planet: null\r\n};\r\n\r\n/* const planet = handleActions(\r\n  {\r\n    [GET_PLANET_SUCCESS]: (state, action) => ({\r\n      ...state,\r\n      planet: action.payload\r\n    })\r\n  },\r\n  initialState\r\n); */\r\n\r\nfunction planet(state = initialState, action: IAction){\r\n  switch (action.type) {\r\n    case GET_PLANET_SUCCESS:\r\n      return {\r\n        ...state,\r\n        planet: action.payload\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default planet;\r\n","//import { handleActions } from 'redux-actions';\r\nimport * as api from '../lib/api/apiPlanets';\r\nimport createRequestThunk from '../lib/createRequestThunk';\r\nimport { IAction } from './types';\r\n\r\nconst GET_PLANETS = 'planetList/GET_PLANETS';\r\nconst GET_PLANETS_SUCCESS = 'planetList/GET_PLANETS_SUCCESS';\r\n\r\n\r\nexport const getPlanets = createRequestThunk(GET_PLANETS, api.getPlanets);\r\n\r\nconst initialState = {\r\n  planetList: null\r\n};\r\n\r\n/* const planetList = handleActions(\r\n  {\r\n    [GET_PLANETS_SUCCESS]: (state, action) => ({\r\n      ...state,\r\n      planetList: action.payload\r\n    })\r\n  },\r\n  initialState\r\n); */\r\n\r\nfunction planetList(state = initialState, action: IAction){\r\n  switch (action.type) {\r\n    case GET_PLANETS_SUCCESS:\r\n      return {\r\n        ...state,\r\n        planetList: action.payload\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default planetList;\r\n","//import { handleActions } from 'redux-actions';\r\nimport * as api from '../lib/api/apiPeople';\r\nimport createRequestThunk from '../lib/createRequestThunk';\r\nimport { IAction } from './types';\r\n\r\nconst GET_PERSON = 'people/GET_PERSON';\r\nconst GET_PERSON_SUCCESS = 'people/GET_PERSON_SUCCESS';\r\n\r\n//export const getPlanet = createAction(GET_PLANET, id => id);\r\n\r\nexport const getPeopleById = createRequestThunk(GET_PERSON, api.getPerson);\r\n\r\nconst initialState = {\r\n  people: null\r\n};\r\n\r\n/* const people = handleActions(\r\n  {\r\n    [GET_PERSON_SUCCESS]: (state, action) => ({\r\n      ...state,\r\n      people: action.payload\r\n    })\r\n  },\r\n  initialState\r\n); */\r\n\r\nfunction people(state = initialState, action: IAction){\r\n  switch (action.type) {\r\n    case GET_PERSON_SUCCESS:\r\n      return {\r\n        ...state,\r\n        people: action.payload\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default people;\r\n","//import { handleActions } from 'redux-actions';\r\nimport * as api from '../lib/api/apiPeople';\r\nimport createRequestThunk from '../lib/createRequestThunk';\r\nimport { IAction } from './types';\r\n\r\nconst GET_PEOPLE = 'peopleList/GET_PEOPLE';\r\nconst GET_PEOPLE_SUCCESS = 'peopleList/GET_PEOPLE_SUCCESS';\r\n\r\n\r\nexport const getPeople = createRequestThunk(GET_PEOPLE, api.getPeople);\r\n\r\nconst initialState = {\r\n  peopleList: null\r\n};\r\n\r\n/* const peopleList = handleActions(\r\n  {\r\n    [GET_PEOPLE_SUCCESS]: (state, action) => ({\r\n      ...state,\r\n      peopleList: action.payload\r\n    })\r\n  },\r\n  initialState\r\n); */\r\n\r\nfunction peopleList(state = initialState, action: IAction){\r\n  switch (action.type) {\r\n    case GET_PEOPLE_SUCCESS:\r\n      return {\r\n        ...state,\r\n        peopleList: action.payload\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default peopleList;\r\n","//import { handleActions } from 'redux-actions';\r\nimport * as api from '../lib/api/apiMovies';\r\nimport createRequestThunk from '../lib/createRequestThunk';\r\nimport { IAction } from './types';\r\n\r\nconst GET_MOVIE = 'movie/GET_MOVIE';\r\nconst GET_MOVIE_SUCCESS = 'movie/GET_MOVIE_SUCCESS';\r\n\r\nexport const getMovieById = createRequestThunk(GET_MOVIE, api.getMovie);\r\n\r\nconst initialState = {\r\n  movie: null\r\n};\r\n\r\n/* const movie = handleActions(\r\n  {\r\n    [GET_MOVIE_SUCCESS]: (state, action) => ({\r\n      ...state,\r\n      movie: action.payload\r\n    })\r\n  },\r\n  initialState\r\n); */\r\n\r\nfunction movie(state = initialState, action: IAction) {\r\n  switch (action.type) {\r\n    case GET_MOVIE_SUCCESS:\r\n      return {\r\n        ...state,\r\n        movie: action.payload\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default movie;\r\n","//import { handleActions } from 'redux-actions';\r\nimport * as api from '../lib/api/apiMovies';\r\nimport createRequestThunk from '../lib/createRequestThunk';\r\nimport { IAction } from './types';\r\n\r\nconst GET_MOVIES = 'movieList/GET_MOVIES';\r\nconst GET_MOVIES_SUCCESS = 'movieList/GET_MOVIES_SUCCESS';\r\n\r\n\r\nexport const getMovies = createRequestThunk(GET_MOVIES, api.getMovies);\r\n\r\nconst initialState = {\r\n  movieList: null\r\n};\r\n\r\n/* const movieList = handleActions(\r\n  {\r\n    [GET_MOVIES_SUCCESS]: (state, action) => ({\r\n      ...state,\r\n      movieList: action.payload\r\n    })\r\n  },\r\n  initialState\r\n);\r\n */\r\nfunction movieList(state = initialState, action: IAction) {\r\n  switch (action.type) {\r\n    case GET_MOVIES_SUCCESS:\r\n      return {\r\n        ...state,\r\n        movieList: action.payload\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default movieList;\r\n","import { combineReducers } from 'redux';\r\nimport planet from './planet';\r\nimport planetList from './planetList';\r\nimport people from './people';\r\nimport peopleList from './peopleList';\r\nimport movie from './movie';\r\nimport movieList from './movieList';\r\nimport loading from './loading';\r\n\r\nconst rootReducer = combineReducers({\r\n    planet,\r\n    planetList,\r\n    people,\r\n    peopleList,\r\n    movie,\r\n    movieList,\r\n    loading\r\n  });\r\n\r\nexport type AppState = ReturnType<typeof rootReducer>;\r\n\r\n  export default rootReducer;","import React, {Suspense} from 'react';\nimport { HashRouter, Route, BrowserRouter as Router } from 'react-router-dom';\n\n//const AppBar = React.lazy(() => import('./components/AppBar'));\nconst Home = React.lazy(() => import('./pages/Home'));\nconst People = React.lazy(() => import('./pages/People'));\nconst PeopleDetail = React.lazy(() => import('./pages/PeopleDetail'));\nconst Planets = React.lazy(() => import('./pages/Planets'));\nconst PlanetDetail = React.lazy(() => import('./pages/PlanetDetail'));\nconst Movies = React.lazy(() => import('./pages/Movies'));\nconst MovieDetail = React.lazy(() => import('./pages/MovieDetail'));\n\nfunction App() {\n  return (\n    <Suspense fallback={<div>Welcome, loading...</div>}>\n      <Router basename='/starwars_films_info'>\n        <HashRouter>\n          <Route component={Home} path=\"/\" exact={true} />\n          <Route component={People} path=\"/people\" />\n          <Route component={PeopleDetail} path=\"/person\" />  \n          <Route component={Planets} path=\"/planets\" />\n          <Route component={PlanetDetail} path=\"/planet\" />\n          <Route component={Movies} path=\"/movies\" />\n          <Route component={MovieDetail} path=\"/movie\" />\n        </HashRouter>\n      </Router>\n    </Suspense>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension/developmentOnly';\nimport rootReducer from './modules';\nimport ReduxThunk from 'redux-thunk';\n//import * as serviceWorker from './serviceWorker';\nimport './index.css';\nimport App from './App';\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(ReduxThunk)) \n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n//serviceWorker.unregister();","import { startLoading, finishLoading } from '../modules/loading';\r\nimport { IAction } from '../modules/types';\r\nimport { Store } from 'redux';\r\n\r\nexport default function createRequestThunk(type: IAction[\"type\"], request: any) {\r\n  const SUCCESS = `${type}_SUCCESS`;\r\n  const FAILURE = `${type}_FAILURE`;\r\n\r\n  return (params: number | undefined) => async (dispatch: Store[\"dispatch\"]) => {\r\n    dispatch({ type });\r\n    dispatch(startLoading(type));\r\n    try {\r\n      const response = await request(params);\r\n      dispatch({\r\n        type: SUCCESS,\r\n        payload: response.data\r\n      });\r\n      dispatch(finishLoading(type));\r\n    } catch (e) {\r\n      dispatch({\r\n        type: FAILURE,\r\n        payload: e,\r\n        error: true\r\n      });\r\n      dispatch(startLoading(type));\r\n      throw e;\r\n    }\r\n  };\r\n}\r\n\r\n"],"sourceRoot":""}